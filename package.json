{
  "name": "copilot-task-master",
  "displayName": "Copilot Task Master",
  "description": "task manager for github copilot",
  "version": "0.0.1",
  "icon": "images/icon.png",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/HenryTabima/task-master-copilot.git"
  },
  "engines": {
    "vscode": "^1.100.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [],
  "main": "./dist/extension.js",
  "contributes": {
    "languageModelTools": [
      {
        "name": "listTasksTool",
        "displayName": "List Tasks",
        "modelDescription": "Lists all current tasks. Does not take any input parameters.",
        "userDescription": "List all your current tasks.",
        "canBeReferencedInPrompt": true,
        "toolReferenceName": "listTasks",
        "icon": "$(list-flat)",
        "inputSchema": {
          "type": "object",
          "properties": {},
          "required": []
        }
      },
      {
        "name": "toggleTaskCompleteTool",
        "displayName": "Toggle Task Complete",
        "modelDescription": "Toggles the completion status of a task. Requires a taskId. Optionally accepts taskStatus (boolean) to set a specific state (true for complete, false for incomplete); otherwise, it toggles the current state.",
        "userDescription": "Toggle the completion status of a task by its ID.",
        "canBeReferencedInPrompt": true,
        "toolReferenceName": "toggleTask",
        "icon": "$(check)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "taskId": {
              "type": "string",
              "description": "The ID of the task to toggle completion status."
            },
            "taskStatus": {
              "type": "boolean",
              "description": "Optional. The desired completion status (true for complete, false for incomplete). If not provided, the status will be toggled."
            }
          },
          "required": [
            "taskId"
          ]
        }
      },
      {
        "name": "deleteCompletedTasksTool",
        "displayName": "Delete Completed Tasks",
        "modelDescription": "Deletes all completed tasks. Does not take any input parameters.",
        "userDescription": "Delete all your completed tasks.",
        "canBeReferencedInPrompt": true,
        "toolReferenceName": "deleteCompletedTasks",
        "icon": "$(trash)",
        "inputSchema": {
          "type": "object",
          "properties": {},
          "required": []
        }
      },
      {
        "name": "operationTaskTool",
        "displayName": "Operation Task Tool",
        "modelDescription": "Performs batch operations on tasks. Allows adding, adding subtasks, toggling completion, and deleting multiple tasks in a single call.",
        "userDescription": "Perform multiple task operations at once.",
        "canBeReferencedInPrompt": true,
        "toolReferenceName": "operationTasks",
        "icon": "$(checklist)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "operations": {
              "type": "array",
              "description": "An array of task operations to perform.",
              "items": {
                "type": "object",
                "properties": {
                  "action": {
                    "type": "string",
                    "description": "The action to perform.",
                    "enum": [
                      "add",
                      "add-subtask",
                      "toggleComplete",
                      "delete"
                    ]
                  },
                  "taskId": {
                    "type": "string",
                    "description": "The ID of the task. Required for 'toggleComplete' and 'delete' actions."
                  },
                  "taskTitle": {
                    "type": "string",
                    "description": "The title of the task. Required for 'add' and 'add-subtask' actions."
                  },
                  "taskDescription": {
                    "type": "string",
                    "description": "An optional description for the task. Used with 'add' and 'add-subtask' actions."
                  },
                  "parentId": {
                    "type": "string",
                    "description": "The ID of the parent task. Required for 'add-subtask' action."
                  },
                  "childTasks": {
                    "type": "array",
                    "description": "An array of child task operations. Used with 'add' action to create nested tasks. Each item follows this same operation schema.",
                    "items": {
                      "$ref": "#/inputSchema/properties/operations/items"
                    }
                  }
                },
                "required": [
                  "action"
                ]
              }
            }
          },
          "required": [
            "operations"
          ]
        }
      }
    ],
    "commands": [
      {
        "command": "copilot-task-master.helloWorld",
        "title": "Hello World",
        "icon": "$(symbol-misc)"
      },
      {
        "command": "copilot-task-master.showTasks",
        "title": "Show Tasks",
        "icon": "$(symbol-misc)"
      },
      {
        "command": "copilot-task-master.refreshTasksView",
        "title": "Refresh Tasks View",
        "icon": "$(refresh)"
      },
      {
        "command": "copilot-task-master.markTaskAsComplete",
        "title": "Mark Task as Complete",
        "icon": "$(check)"
      },
      {
        "command": "copilot-task-master.markTaskAsIncomplete",
        "title": "Mark Task as Incomplete",
        "icon": "$(circle-slash)"
      },
      {
        "command": "copilot-task-master.deleteTask",
        "title": "Delete Task",
        "icon": "$(trash)"
      },
      {
        "command": "copilot-task-master.editTaskTitle",
        "title": "Edit Task Title",
        "icon": "$(edit)"
      },
      {
        "command": "copilot-task-master.editTaskDescription",
        "title": "Edit Task Description",
        "icon": "$(pencil)"
      },
      {
        "command": "copilot-task-master.deleteCompletedTasksFromUI",
        "title": "Delete Completed Tasks",
        "icon": "$(clear-all)"
      },
      {
        "command": "copilot-task-master.resetInstructionFile",
        "title": "Reset Copilot Task Master Instruction File"
      },
      {
        "command": "copilot-task-master.createSubTask",
        "title": "Create Sub-Task",
        "icon": "$(add)"
      },
      {
        "command": "taskmaster.moveTaskUp",
        "title": "Move Task Up",
        "icon": "$(arrow-up)"
      },
      {
        "command": "taskmaster.moveTaskDown",
        "title": "Move Task Down",
        "icon": "$(arrow-down)"
      },
      {
        "command": "taskmaster.moveTaskToParent",
        "title": "Move Task to Another Parent",
        "icon": "$(repo-forked)"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "copilot-task-master-sidebar",
          "title": "Task Master",
          "icon": "$(checklist)"
        }
      ]
    },
    "views": {
      "copilot-task-master-sidebar": [
        {
          "id": "copilot-task-master.tasksView",
          "name": "Tasks",
          "contextualTitle": "Task Master",
          "icon": "$(checklist)"
        }
      ]
    },
    "menus": {
      "view/item/context": [
        {
          "command": "copilot-task-master.markTaskAsComplete",
          "when": "view == copilot-task-master.tasksView && viewItem == task-incomplete",
          "group": "1_modification@1"
        },
        {
          "command": "copilot-task-master.markTaskAsIncomplete",
          "when": "view == copilot-task-master.tasksView && viewItem == task-complete",
          "group": "1_modification@2"
        },
        {
          "command": "copilot-task-master.editTaskTitle",
          "when": "view == copilot-task-master.tasksView",
          "group": "1_modification@3"
        },
        {
          "command": "copilot-task-master.editTaskDescription",
          "when": "view == copilot-task-master.tasksView",
          "group": "1_modification@4"
        },
        {
          "command": "copilot-task-master.deleteTask",
          "when": "view == copilot-task-master.tasksView",
          "group": "2_destructive@1"
        },
        {
          "command": "copilot-task-master.editTaskTitle",
          "when": "view == copilot-task-master.tasksView",
          "group": "inline@1",
          "icon": "$(edit)"
        },
        {
          "command": "copilot-task-master.markTaskAsComplete",
          "when": "view == copilot-task-master.tasksView && viewItem == task-incomplete",
          "group": "inline@2",
          "icon": "$(check)"
        },
        {
          "command": "copilot-task-master.markTaskAsIncomplete",
          "when": "view == copilot-task-master.tasksView && viewItem == task-complete",
          "group": "inline@2",
          "icon": "$(circle-slash)"
        },
        {
          "command": "copilot-task-master.deleteTask",
          "when": "view == copilot-task-master.tasksView",
          "group": "inline@3",
          "icon": "$(trash)"
        },
        {
          "command": "copilot-task-master.createSubTask",
          "when": "view == copilot-task-master.tasksView",
          "group": "inline@4",
          "icon": "$(add)"
        },
        {
          "command": "taskmaster.moveTaskUp",
          "when": "view == copilot-task-master.tasksView && viewItem",
          "group": "3_reorder@1"
        },
        {
          "command": "taskmaster.moveTaskDown",
          "when": "view == copilot-task-master.tasksView && viewItem",
          "group": "3_reorder@2"
        },
        {
          "command": "taskmaster.moveTaskToParent",
          "when": "view == copilot-task-master.tasksView && viewItem",
          "group": "3_reorder@3"
        }
      ],
      "view/title": [
        {
          "command": "copilot-task-master.deleteCompletedTasksFromUI",
          "when": "view == copilot-task-master.tasksView",
          "group": "navigation",
          "icon": "$(clear-all)"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src",
    "test": "vscode-test",
    "test:jest": "jest",
    "test:jest:watch": "jest --watch"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3.3.1",
    "@eslint/js": "^9.26.0",
    "@types/jest": "^29.5.14",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/vscode": "^1.100.0",
    "@typescript-eslint/eslint-plugin": "^8.32.1",
    "@typescript-eslint/parser": "^8.32.1",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.5.2",
    "@vscode/vsce": "^3.3.2",
    "eslint": "^9.26.0",
    "eslint-config-prettier": "^10.1.5",
    "eslint-import-resolver-typescript": "^4.3.4",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-jest": "^28.11.0",
    "esbuild": "^0.25.3",
    "jest": "^29.7.0",
    "node-gyp": "^11.2.0",
    "npm-run-all": "^4.1.5",
    "prettier": "^3.5.3",
    "ts-jest": "^29.3.2",
    "typescript": "^5.8.3",
    "typescript-eslint": "^8.32.1"
  },
  "dependencies": {
    "lowdb": "^7.0.1"
  }
}
